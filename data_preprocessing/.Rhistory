ggplot(genes_df, aes(x = start, xend = end, y = seqnames, yend = seqnames, color = gene_id)) +
geom_segment(size = 3) +
labs(x = "Genomic Position", y = "Chromosome", title = "Gene Locations") +
theme_minimal() +
scale_color_discrete(name = "Gene ID")
genes_df <- as.data.frame(genes)
ggplot(genes_df, aes(x = start, xend = end, y = seqnames, yend = seqnames, color = name)) +
geom_segment(linewidth = 3) +
labs(x = "Genomic Position", y = "Chromosome", title = "Gene Locations") +
theme_minimal() +
scale_color_discrete(name = "Gene ID")
genes_df <- as.data.frame(genes)
ggplot(genes_df, aes(x = start, xend = end, y = seqnames, yend = seqnames, color = name)) +
geom_segment(linewidth = 3) +
#labs(x = "Genomic Position", y = "Chromosome", title = "Gene Locations") +
theme_minimal() +
scale_color_discrete(name = "Gene ID")
plotEnrichment(hmm = model, annotation = genes)
plotEnrichment(hmm = model, annotation = genes, region = "start")
binned.data <- binReads(dummy.data, format = "GRanges", chromosomes = "chr12")
binned.data <- binReads(file, format = "GRanges", chromosomes = "chr12")
file <- system.file("extdata","euratrans","lv-H3K4me3-BN-male-bio2-tech1.bam",
package="chromstaRData")
dummy.data <- readGAlignments(file)
data(rn4_chrominfo)
binned.data <- binReads(file, format = "GRanges", chromosomes = "chr12")
binned.data <- binReads(file, assembly = rn4_chrominfo, format = "GRanges", chromosomes = "chr12")
binned.data <- binReads(file, assembly = rn4_chrominfo, format = "GRanges", chromosomes = "chr12")
binned.data <- binReads(file, assembly = rn4_chrominfo, format = "GRanges", chromosomes = "chr12")
binned.data <- binReads(file, assembly = rn4_chrominfo, chromosomes = "chr12")
model <- callPeaksUnivariate(binned.data)
library(biomaRt)
ensembl <- useEnsembl(biomart='ENSEMBL_MART_ENSEMBL',
dataset='rnorvegicus_gene_ensembl')
genes <- getBM(attributes=c('ensembl_gene_id',
'chromosome_name',
'start_position',
'end_position',
'strand',
'external_gene_name','gene_biotype'),
mart=ensembl)
genes <- GRanges(seqnames=paste0('chr',genes$chromosome_name),
ranges=IRanges(start=genes$start, end=genes$end),
strand=genes$strand,
name=genes$external_gene_name, biotype=genes$gene_biotype)
# Rename chrMT to chrM to avoid warnings
seqlevels(genes)[seqlevels(genes)=='chrMT'] <- 'chrM'
# Select only chr12 to avoid warnings
genes <- keepSeqlevels(genes, 'chr12', pruning.mode = 'coarse')
plotEnrichment(hmm = model, annotation = genes, region = "start")
binned.data <- binReads(dummy.data, format = "GRanges", assembly = rn4_chrominfo, chromosomes = "chr12")
model <- callPeaksUnivariate(binned.data)
plotEnrichment(hmm = model, annotation = genes, region = "start")
plotGenomeBrowser(genes)
plotHistogram(model)
data.track <- DataTrack(binned.data)
plotTracks(c(genes.track, data.track), type="histogram")
knitr::opts_chunk$set(echo = TRUE)
plotTracks(c(data.track, genes.track), type="histogram")
plotTracks(c(data.track, genes.track), type="histogram",
from = 1, to = 1e5)
AT = GenomeAxisTrack()
plotTracks(c(data.track, genes.track, AT), type="histogram",
from = 1, to = 1e5)
genes
genes.track <- AnnotationTrack(genes, id = genes$name)
plotTracks(c(data.track, genes.track, AT), type="histogram",
from = 1, to = 1e5, featureAnnotation = "id")
genes[name=="Brca2"]
plotTracks(c(data.track, genes.track, AT), type="histogram",
from = 1, to = 2e5, featureAnnotation = "id")
plotTracks(c(data.track, genes.track, AT), type="histogram",
from = 1, to = 12e4, featureAnnotation = "id")
plotTracks(c(data.track, genes.track, AT), type="histogram",
from = 1, to = 10e5, featureAnnotation = "id")
plotTracks(c(data.track, genes.track, AT), type="histogram",
from = 1, to = 1e5, featureAnnotation = "id")
plotTracks(c(data.track, genes.track, AT), type="histogram", featureAnnotation = "id")
plotTracks(c(data.track, genes.track, AT), type="histogram", featureAnnotation = "id")
genes <- getBM(attributes=c('ensembl_gene_id',
'chromosome_name',
'start_position',
'end_position',
'strand',
'external_gene_name','gene_biotype'),
mart=ensembl)
rds <- readRDS("C:\Users\malce\Downloads\gene_count_cleaned_sampled_100k.RDS")
file <- system.file("C:\Users\malce\Downloads\gene_count_cleaned_sampled_100k.RDS")
file <- system.file('C:\Users\malce\Downloads\gene_count_cleaned_sampled_100k.RDS')
rds <- readRDS("C:/Users/malce/Downloads/gene_count_cleaned_sampled_100k.RDS")
head(rds)
library(tidyverse)
rds <- as_tibble(rds)
dim(rds)
dimnames(rds)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Matrix)
expression_matrix <- readRDS("../data/OMIX928-99-02.rds") # not included in git
annotations <- read_csv("../data/OMIX928-24.csv", show_col_types = FALSE)
annotations <- annotations %>% select(Barcode, Celltype) %>%
filter(grepl("Erythroblast", Celltype)|
grepl("Cycling_Blood_Progenitor", Celltype)|
grepl("Macrophage", Celltype)|
grepl("Megakaryocyte_Progenitor", Celltype)|
grepl("Myeloid_Cell", Celltype)|
grepl("Blood_Progenitor", Celltype)) %>%
mutate(Celltype = replace(Celltype, grepl("Erythroblast", Celltype), "Erythroblast")) %>%
mutate(Celltype = replace(Celltype, grepl("Cycling_Blood_Progenitor", Celltype), "Cycling_Blood_Progenitor")) %>%
mutate(Celltype = replace(Celltype, grepl("Macrophage", Celltype), "Macrophage")) %>%
mutate(Celltype = replace(Celltype, grepl("Blood_Progenitor", Celltype), "Blood_Progenitor"))
expression_matrix <- expression_matrix[, annotations$Barcode]
row_sums <- rowSums(expression_matrix)
indx_genes <- which(row_sums < max(row_sums)/20)
expression_matrix <- expression_matrix[indx_genes,]
expression_matrix <- readRDS("../data/OMIX928-99-02.rds") # not included in git
annotations <- read_csv("../data/OMIX928-24.csv", show_col_types = FALSE)
annotations <- annotations %>% select(Barcode, Celltype) %>%
filter(grepl("Erythroblast", Celltype)|
grepl("Cycling_Blood_Progenitor", Celltype)|
grepl("Macrophage", Celltype)|
grepl("Megakaryocyte_Progenitor", Celltype)|
grepl("Myeloid_Cell", Celltype)|
grepl("Blood_Progenitor", Celltype)) %>%
mutate(Celltype = replace(Celltype, grepl("Erythroblast", Celltype), "Erythroblast")) %>%
mutate(Celltype = replace(Celltype, grepl("Cycling_Blood_Progenitor", Celltype), "Cycling_Blood_Progenitor")) %>%
mutate(Celltype = replace(Celltype, grepl("Macrophage", Celltype), "Macrophage")) %>%
mutate(Celltype = replace(Celltype, grepl("Blood_Progenitor", Celltype), "Blood_Progenitor"))
expression_matrix <- expression_matrix[, annotations$Barcode]
row_sums <- rowSums(expression_matrix)
indx_genes <- which(row_sums > max(row_sums)/100)
expression_matrix <- expression_matrix[indx_genes,]
saveRDS(expression_matrix, file = "../data/ATAC-Seq-filtered.rds")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Matrix)
library(umap)
library(reticulate)
use_python("C:/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.12_3.12.1008.0_x64__qbz5n2kfra8p0/python.exe")
library(tidyverse)
library(Matrix)
library(umap)
library(reticulate)
use_python("C:/Users/malce/AppData/Local/Microsoft/WindowsApps/python.exe")
library(tidyverse)
library(Matrix)
library(umap)
library(reticulate)
use_python("C:/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.12_3.12.1008.0_x64__qbz5n2kfra8p0/python3.12.exe")
ATAC_expression_matrix <- readRDS("../data/ATAC-Seq-filtered.rds")
ATAC_annnotations <- read_csv("../data/ATAC_annotations.csv", show_col_types = FALSE)
ATAC_annnotations <- read_csv("../data/ATAC_annotations.csv", show_col_types = FALSE)
custom.config <- umap.defaults
custom.config$verbose <- 1
umap <- umap(t(ATAC_expression_matrix),
config = custom.config,
method = "umap-learn")
library(tidyverse)
library(Matrix)
library(umap)
library(reticulate)
use_python("C:/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.12_3.12.1008.0_x64__qbz5n2kfra8p0/python3.12.exe")
ATAC_expression_matrix <- readRDS("../data/ATAC-Seq-filtered.rds")
ATAC_annnotations <- read_csv("../data/ATAC_annotations.csv", show_col_types = FALSE)
BiocManager::install("DESeq2")
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
library(Matrix)
library(tidyverse)
RNA_expression_matrix <- readRDS("../data/pre_processed/RNA-Seq-filtered.rds")
RNA_expression_matrix <- RNA_expression_matrix + 1
RNA_annotations <- read_csv("../data/pre_processed/RNA_annotations.csv",show_col_types = FALSE)
dds <- DESeqDataSetFromMatrix(countData = RNA_expression_matrix,
colData = select(RNA_annotations, c("sample", "Sub_trajectory_name")),
design = ~ Sub_trajectory_name)
dea <- DESeq(dds, parallel = TRUE)
results <- results(dea)
plotMA(results)
res_df <- as_tibble(results)
View(res_df)
View(dea)
assay(vst(dds))
assay(vst(dea))
colData(dea)
rowData(dea)
View(RNA_annotations)
len(distinct(RNA_annotations$Sub_trajectory_name)
)
length(distinct(RNA_annotations$Sub_trajectory_name))
length(distinct(factor(RNA_annotations$Sub_trajectory_name)))
length(distinct(factor(RNA_annotations$Sub_trajectory_name)))
distinct(c('a', 'b', 'b'))
distinct(c(1,2,3,4,4))
nrow(distinct(RNA_annotations, Sub_trajectory_name))
distinct(RNA_annotations, Sub_trajectory_name)
knitr::opts_chunk$set(echo = TRUE)
expression_matrix <- readRDS("../data/unprocessed/gene_count_cleaned.RDS") # not included in git
annotations <- read_csv("../data/unprocessed/cell_annotate.csv", show_col_types = FALSE)
annotations <- annotations %>%
filter(Sub_trajectory_name %in% c("Definitive erythroid trajectory",
"White blood cell trajectory",
"primitive erythroid trajectory",
"Megakaryocyte trajectory"),
Total_mRNAs >= 400,
doublet_cluster == FALSE,
detected_doublet == FALSE)%>%
select(sample, Main_cell_type, Main_trajectory, Sub_trajectory_name)
distinct(annotations, Sub_trajectory_name)
write_csv(annotations, "../data/pre_processed/RNA_annotations.csv")
expression_matrix <- expression_matrix[,annotations$sample]
row_max <- apply(expression_matrix, 1, max)
indx_genes <- which(row_max > 10)
expression_matrix <- expression_matrix[indx_genes,]
saveRDS(expression_matrix, file = "../data/pre_processed/RNA-Seq-filtered.rds")
library(DESeq2)
library(Matrix)
library(tidyverse)
library(BiocParallel)
register(MulticoreParam(4))
library(DESeq2)
library(Matrix)
library(tidyverse)
library(BiocParallel)
register(SnowParam(4))
RNA_expression_matrix <- readRDS("../data/pre_processed/RNA-Seq-filtered.rds")
RNA_expression_matrix <- RNA_expression_matrix + 1
RNA_annotations <- read_csv("../data/pre_processed/RNA_annotations.csv",show_col_types = FALSE)
distinct(RNA_annotations, Main_trajectory)
data <- readRDS("C:/Users/malce/Downloads/OMIX928-99-01.rds")
head(data)
max(data[1,:])
max(data[1,])
max(data[25,])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read_csv("OMIX928-24.csv")
View(data)
data <- data %>%
filter(grepl("Erythroblast", Celltype)|
grepl("Cycling_Blood_Progenitor", Celltype)|
grepl("Macrophage", Celltype)|
grepl("Megakaryocyte_Progenitor", Celltype)|
grepl("Myeloid_Cell", Celltype)|
grepl("Blood_Progenitor", Celltype))
View(data)
nrow(data)
distinct(data, sample)
distinct(data, "sample")
distinct(data$Sample)
distinct(data, "Sample")
distinct(data, Sample)
distinct(data, Sample)$Sample
for (s in distinct(data, Sample)$Sample){
print(s,":" ,nrow(filter(data, Sample == s)))
}
for (s in distinct(data, Sample)$Sample){
print(nrow(filter(data, Sample == s)))
}
for (s in distinct(data, Sample)$Sample){
print(s)
print(nrow(filter(data, Sample == s)))
}
View(data)
library(tidyverse)
data <- read_csv("OMIX928-24.csv")
dist <- distinct(data, Celltype)
View(dist)
for (s in distinct(data, Celltype)$Celltype){
print(s)
print(nrow(filter(data, Sample == s)))
}
for (s in distinct(data, Celltype)$Celltype){
print(s)
print(nrow(filter(data, Celltype == s)))
}
for (s in distinct(data, Sample)$Sample){
print(s)
print(nrow(filter(data, Sample == s)))
}
data <- filter(data, Sample == "scATAC_SpinalCord_E13_5")
for (s in distinct(data, Celltype)$Celltype){
print(s)
print(nrow(filter(data, Celltype == s)))
}
install.packages("Matrix.utils")
library(Matrix.utils)
library(Matrix)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- join.Matrix(matrix1, matrix2, by = "row.names")
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/Matrix.utils/Matrix.utils_0.9.7.tar.gz")
install.packages("devtools")
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/Matrix.utils/Matrix.utils_0.9.7.tar.gz")
library(Matrix)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- join.Matrix(matrix1, matrix2, by = "row.names")
library(Matrix.utils)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- join.Matrix(matrix1, matrix2, by = "row.names")
library(Matrix.utils)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- join.Matrix(matrix1, matrix2, by.x = "row.names", by.y = "row.names")
library(Matrix.utils)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- merge(matrix1, matrix2, by = "RowNames", all = TRUE)
library(Matrix.utils)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- merge(matrix1, matrix2, all = TRUE)
# Print the joined matrix
print(joined_matrix)
library(Matrix.utils)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- merge(matrix1, matrix2, by.x = rownames(matrix1), by.y = rownames(matrix2) all = TRUE)
library(Matrix.utils)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- merge(matrix1, matrix2, by.x = rownames(matrix1), by.y = rownames(matrix2), all = TRUE)
rownames(matrix1)
library(Matrix.utils)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- merge(matrix1, matrix2, by="row.names", all = TRUE)
# Print the joined matrix
print(joined_matrix)
library(Matrix.utils)
# Create example matrices
matrix1 <- matrix(1:9, nrow=3, byrow=TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- matrix(10:15, nrow=3, byrow=TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- merge(matrix1, matrix2, by="row.names", all = TRUE, incomparables = 0)
# Print the joined matrix
print(joined_matrix)
library(Matrix.utils)
# Create example matrices
matrix1 <- Matrix(1:9, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- Matrix(10:15, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- merge(matrix1, matrix2, by="row.names", all = TRUE, incomparables = 0)
library(Matrix)
# Create example matrices
matrix1 <- Matrix(1:9, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- Matrix(10:15, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- merge(matrix1, matrix2, by="row.names", all = TRUE, incomparables = 0)
library(Matrix)
# Create example matrices
matrix1 <- Matrix(1:9, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- Matrix(10:15, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- base::merge(matrix1, matrix2, by="row.names", all = TRUE, incomparables = 0)
library(Matrix)
# Create example matrices
matrix1 <- Matrix(1:9, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- Matrix(10:15, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- base::merge(matrix1, matrix2, by.x="row.names", by.y="row.names", all = TRUE, incomparables = 0)
library(Matrix)
# Create example matrices
matrix1 <- Matrix(1:9, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix1) <- c("row1", "row2", "row3")
colnames(matrix1) <- c("A", "B", "C")
matrix2 <- Matrix(10:15, nrow=3, byrow=TRUE, sparse = TRUE)
rownames(matrix2) <- c("row1", "row2", "row4") # Note the different row names
colnames(matrix2) <- c("D", "E")
# Join matrices by row names
joined_matrix <- base::merge(matrix1, matrix2, by.x="row.names", by.y="row.names")
library(Matrix)
library(GenomicRanges)
library(rtracklayer)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(readr)
library(dplyr)
library(tidyr)
library(tibble)
path = "../data/unprocessed/atac_organ_fragments/"
files <- read.table(paste(path, "md5.txt", sep = ""))$V2
setwd("F:/DS_Project/data_preprocessing")
library(Matrix)
library(GenomicRanges)
library(rtracklayer)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(readr)
library(dplyr)
library(tidyr)
library(tibble)
path = "../data/unprocessed/atac_organ_fragments/"
files <- read.table(paste(path, "md5.txt", sep = ""))$V2
genes <- genes(TxDb.Mmusculus.UCSC.mm10.knownGene)
for(file in files[20]){
fragments <- read_tsv(paste(path, file, sep = ""),
col_names = FALSE,
num_threads = 16,
show_col_types = FALSE)
print("file loaded")
atac_Granges <- GRanges(seqnames = fragments$X1,
ranges = IRanges(start = fragments$X2,
end = fragments$X3),
sample = fragments$X4)
rm(fragments)
nearest_genes <- nearest(atac_Granges, genes)
atac_Granges$gene_id <- mcols(genes)$gene_id[nearest_genes]
print("nearest genes calculated")
gene_symbols <- mapIds(org.Mm.eg.db,
keys = atac_Granges$gene_id,
column = "SYMBOL",
keytype = "ENTREZID",
multiVals = "first")
atac_Granges$gene_symbol <- gene_symbols
atac_df <- as_tibble(atac_Granges)
print("got dataframe")
rm(atac_Granges)
atac_df <- atac_df %>%
summarise(count = n(), .by = c("gene_symbol", "sample")) %>%
arrange(gene_symbol, sample) %>%
ungroup()
print(atac_df)
atac_df <- pivot_wider(atac_df, names_from = sample, values_from = count, values_fill = list(count = 0)) %>%
drop_na(gene_symbol) %>%
mutate(gene_symbol = as.character(gene_symbol)) %>%
column_to_rownames(var = "gene_symbol")
print("reshaped dataframe")
atac_matrix <- as(atac_df, "sparseMatrix")
print(paste("got matrix,", file))
saveRDS(atac_matrix, paste("../data/unprocessed/atac_organ_counts/ATAC_counts",file,".rds", sep = ""), compress = TRUE)
rm(atac_df, atac_matrix)
}
